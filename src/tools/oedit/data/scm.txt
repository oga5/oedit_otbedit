// scheme keywords
// テキストモードでカラー表示したいキーワードを登録してください　
*
+
-
/
:optional
<
<=
<sys-tm>
=
>
>
>=
abs
and
append
apply
assoc
assq
assv
begin
boolean?
c-test
caaaar
caaadr
caaar
caadar
caaddr
caadr
caar
cadaar
cadadr
cadar
caddar
cadddr
caddr
cadr
call-with-current-continuation
call-with-input-file
call-with-output-file
call-with-values
call/cc
car
case
cdaaar
cdaadr
cdaar
cdadar
cdaddr
cdadr
cdar
cddaar
cddadr
cddar
cdddar
cddddr
cdddr
cddr
cdr
char->integer
char-alphabetic?
char-ci<=?
char-ci<?
char-ci=?
char-ci>=?
char-ci>?
char-downcase
char-lower-case?
char-numeric?
char-upcase
char-upper-case?
char-whitespace?
char<=?
char<?
char=?
char>=?
char>?
char?
check-arg
clear-output-string
close-input-port
close-output-port
closure?
cond
cons
current-input-port
current-output-port
cut
cute
define
define-class
define-macro
delay
display
do
else
eof-object?
eq?
equal?
eqv?
error
eval
even?
exit
file-exists?
for-each
force
gc
gensym
gensym?
get-closure-code
get-output-string
h
hash-table-delete!
hash-table-exists?
hash-table-for-each
hash-table-get
hash-table-map
hash-table-num-entries
hash-table-put!
hash-table-type
hash-table?
if
input-port?
integer->char
integer?
interaction-environment
lambda
length
let
let*
letrec
list
list->string
list->vector
list-ref
list-tail
list?
load
macro?
macroexpand
macroexpand-1
make
make-hash-table
make-string
make-vector
map
max
member
memq
memv
min
negative?
newline
not
null?
number->string
number?
odd?
open-input-file
open-input-string
open-output-file
open-output-string
or
output-port?
pair?
peek-char
port-closed?
positive?
procedure?
quasiquote
quote
quote-vector
read
read-char
receive
regexp->string
regexp-replace
regexp-replace-all
regexp?
regmatch?
remainder
require
reverse
rxmatch
rxmatch-end
rxmatch-num-matches
rxmatch-start
rxmatch-substring
set!
set-car!
set-cdr!
slot-ref
slot-set!
string
string->list
string->number
string->regexp
string->symbol
string-append
string-ci<=?
string-ci<?
string-ci=?
string-ci>=?
string-ci>?
string-copy
string-length
string-ref
string-set!
string<=?
string<?
string=?
string>=?
string>?
string?
substring
symbol->string
symbol-bound?
symbol?
sys-localtime
sys-strftime
sys-time
use
values
vector
vector->list
vector-length
vector-ref
vector-set!
vector?
write
write-char
zero?
